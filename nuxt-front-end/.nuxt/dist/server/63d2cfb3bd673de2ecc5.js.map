{"version":3,"file":"63d2cfb3bd673de2ecc5.js","sources":["webpack:///./pages/register.vue"],"sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nfunction hasErrors(fieldsError) {\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\nexport default {\n  beforeCreate() {\n    this.form = this.$form.createForm(this);\n  },\n  data() {\n    return {\n      hasErrors,\n      form: this.$form.createForm(this)\n    };\n  },\n  mounted() {\n    this.$nextTick(() => {\n      // To disabled submit button at the beginning.\n      this.form.validateFields();\n    });\n  },\n\n  methods: {\n    // Only show error after a field is touched.\n    userNameError() {\n      const { getFieldError, isFieldTouched } = this.form;\n      return isFieldTouched(\"username\") && getFieldError(\"username\");\n    },\n    passwordError() {\n      const { getFieldError, isFieldTouched } = this.form;\n      return isFieldTouched(\"password\") && getFieldError(\"password\");\n    },\n    passwordConfirmationError() {\n      const { getFieldError, isFieldTouched } = this.form;\n      return (\n        isFieldTouched(\"password_confirmation\") &&\n        getFieldError(\"password_confirmation\")\n      );\n    },\n    emailError() {\n      const { getFieldError, isFieldTouched } = this.form;\n      return isFieldTouched(\"email\") && getFieldError(\"email\");\n    },\n    nameError() {\n      const { getFieldError, isFieldTouched } = this.form;\n      return isFieldTouched(\"name\") && getFieldError(\"name\");\n    },\n    lastNameError() {\n      const { getFieldError, isFieldTouched } = this.form;\n      return isFieldTouched(\"last_name\") && getFieldError(\"last_name\");\n    },\n    showErrors(errors) {\n      if (errors.email === \"errors\") {\n        return this.$toast.error(\"Email can't be blank\");\n      }\n    },\n    async register() {\n      try {\n        let response = await this.$axios.post(\n          \"http://localhost:8080/api/v1/users\",\n          {\n            user: {\n              email: this.form.getFieldValue(\"email\"),\n              username: this.form.getFieldValue(\"username\"),\n              name: this.form.getFieldValue(\"name\"),\n              last_name: this.form.getFieldValue(\"last_name\"),\n              password: this.form.getFieldValue(\"password\"),\n              password_confirmation: this.form.getFieldValue(\n                \"password_confirmation\"\n              )\n            }\n          }\n        );\n        this.$toast.success(\"Registered Successfully!\");\n        await this.$auth.loginWith(\"local\", {\n          data: {\n            email: response.data.email,\n            password: this.form.getFieldValue(\"password\"),\n            grant_type: \"password\"\n          }\n        });\n        this.$toast.success(\"Logged In!\");\n      } catch (e) {\n        if (e.response.data.errors.hasOwnProperty(\"email\")) {\n          this.$toast.error(\"Email \" + e.response.data.errors.email);\n        }\n        if (e.response.data.errors.hasOwnProperty(\"password\")) {\n          this.$toast.error(\"Password \" + e.response.data.errors.password);\n        }\n        if (e.response.data.errors.hasOwnProperty(\"password_confirmation\")) {\n          this.$toast.error(\n            \"Password \" + e.response.data.errors.password_confirmation\n          );\n        }\n        if (e.response.data.errors.hasOwnProperty(\"username\")) {\n          this.$toast.error(\"Username \" + e.response.data.errors.username);\n        }\n        if (e.response.data.errors.hasOwnProperty(\"name\")) {\n          this.$toast.error(\"Name \" + e.response.data.errors.name);\n        }\n        if (e.response.data.errors.hasOwnProperty(\"last_name\")) {\n          this.$toast.error(\"Last name \" + e.response.data.errors.last_name);\n        }\n      }\n    }\n  }\n};\n"],"mappings":"AAqHA","sourceRoot":""}